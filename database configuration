// config/database.js
const mongoose = require('mongoose');
const redis = require('redis');

let redisClient;

const connectDB = async () => {
  try {
    // MongoDB connection
    const mongoURI = process.env.DATABASE_URL || 'mongodb://localhost:27017/cms';
    
    const conn = await mongoose.connect(mongoURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log(`✅ MongoDB Connected: ${conn.connection.host}`);

    // Redis connection
    if (process.env.REDIS_URL) {
      redisClient = redis.createClient({
        url: process.env.REDIS_URL
      });

      redisClient.on('error', (err) => {
        console.error('❌ Redis Client Error:', err);
      });

      redisClient.on('connect', () => {
        console.log('✅ Redis Connected');
      });

      await redisClient.connect();
    }

  } catch (error) {
    console.error('❌ Database connection error:', error.message);
    process.exit(1);
  }
};

const getRedisClient = () => redisClient;

// Cache helper functions
const setCache = async (key, value, expiration = 3600) => {
  if (redisClient) {
    try {
      await redisClient.setEx(key, expiration, JSON.stringify(value));
    } catch (error) {
      console.error('Cache set error:', error);
    }
  }
};

const getCache = async (key) => {
  if (redisClient) {
    try {
      const value = await redisClient.get(key);
      return value ? JSON.parse(value) : null;
    } catch (error) {
      console.error('Cache get error:', error);
      return null;
    }
  }
  return null;
};

const deleteCache = async (key) => {
  if (redisClient) {
    try {
      await redisClient.del(key);
    } catch (error) {
      console.error('Cache delete error:', error);
    }
  }
};

const clearCache = async (pattern = '*') => {
  if (redisClient) {
    try {
      const keys = await redisClient.keys(pattern);
      if (keys.length > 0) {
        await redisClient.del(keys);
      }
    } catch (error) {
      console.error('Cache clear error:', error);
    }
  }
};

module.exports = {
  connectDB,
  getRedisClient,
  setCache,
  getCache,
  deleteCache,
  clearCache
};
